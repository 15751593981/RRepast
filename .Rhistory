library(rrepast)
nums
best
best[,2]
best[,3]
best[,4]
library(rrepast)
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, method="simple", my.cost)
v$charts
v$charts[1,]
plot(v$charts[1,])
v$charts[1,]
library(rrepast)
library(rrepast)
v$charts
v$charts[1,]
print(v$charts[1,])
v$charts[]
v$charts[2]
v$charts[1,
]
v$charts[1,]$chart
plot(v$charts[1,]$chart)
plot(v$charts[1,]$chart$grobs)
plot(v$charts[1,]$chart$layout)
help("grid.arrange")
ggplot(v$charts[1,])
library(ggplot2)
ggplot(v$charts[1,])
v$charts[1,]
arrangeGrob
library(rrepast)
ls
ls()
ls()-c(f)
setdiff(ls(),c(f))
setdiff(ls(),c("f"))
setdiff(ls(),c("f","my.cost"))
rm(list=setdiff(ls(),c("f","my.cost")))
ls
ls()
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, method="simple", my.cost)
devtools::document()
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, method="simple", my.cost)
v$charts
v$charts[1,]
arrange.grid(v$charts[1,])
gridExtra::arrange.grid(v$charts[1,])
gridExtra::grid.arrange(v$charts[1,])
gridExtra::grid.arrange(v$charts[1,]$chart)
v$charts[1,]$chart
gridExtra::grid.arrange(v$charts[1,]$chart)
gridExtra::grid.arrange(v$charts[2,]$chart)
gridExtra::grid.arrange(v$charts[4,]$chart)
v$charts[1,]$chart$grobs
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=3, method="simple", my.cost)
gridExtra::grid.arrange(v$charts[4,]$chart)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 100, exp.r=1, method="simple", my.cost)
gridExtra::grid.arrange(v$charts[4,]$chart)
gridExtra::grid.arrange(v$charts[1,]$chart)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",360,f,exp.n = 1000, exp.r=1, method="simple", my.cost)
gridExtra::grid.arrange(v$charts[1,]$chart)
as.data.frame(c(1,2,3,4))
as.data.frame(A= c(1,2,3,4))
as.data.frame(c(1,2,3,4),"A")
v$experiment$paramset
my.dfhead(v$experiment$paramset)
mydata<- head(v$experiment$paramset)
vapply(mydata,is.numeric)
vapply(mydata,is.numeric,1)
vapply(mydata,is.numeric,FUN.VALUE = logical(1))
tst<- vapply(mydata,is.numeric,FUN.VALUE = logical(1))
mydata[,tst]
tst<- vapply(mydata,is.numeric,FUN.VALUE = 1
)
tst<- vapply(mydata,is.numeric,FUN.VALUE = 1)
tst
mydata[,tst]
tst<- vapply(mydata,is.numeric,FUN.VALUE = TRUE)
mydata[,tst]
tst<- vapply(mydata,is.numeric,FUN.VALUE = FALSE)
mydata[,tst]
tst
tst
tst<- vapply(mydata,is.numeric,FUN.VALUE = "A")
help(vapply)
sapply(mydata,is.numeric)
mydate[,sapply(mydata,is.numeric)]
mydata[,sapply(mydata,is.numeric)]
sapply(mydata[,sapply(mydata,is.numeric)],round(x,2))
sapply(mydata[,sapply(mydata,is.numeric)],round(X,2))
sapply(mydata[,sapply(mydata,is.numeric)],round)
sapply(mydata[,sapply(mydata,is.numeric)],round,digis=2)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=2)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=2)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=2)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=3)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=3)
sapply(mydata[,sapply(mydata,is.numeric)],round,digits=3)
devtools::document()
devtools::document()
devtools::document()
library(rrepast)
match.fun(FUN="!")
match.fun(FUN="!")(TRUE)
match.fun(FUN="")(TRUE)
match.fun(FUN="x")(TRUE)
match.fun(FUN="!")(TRUE)
match.fun(FUN="!!")(TRUE)
match.fun(FUN=".")(TRUE)
match.fun(FUN="=")(TRUE)
match.fun(FUN="!")(TRUE)
function(x) x
match.fun(FUN="function(x) x")(TRUE)
match.fun(FUN="function(x){x}")(TRUE)
match.fun(FUN="(function(x) x)")(TRUE)
match.fun(FUN="(function(x) x)")(TRUE)
devtools::document()
devtools::document()
devtools::document()
library(rrepast)
history()
devtools::document()
devtools::document()
library(rrepast)
rm(list=ls())
my.cost<- function(params, results) {
criteria<- c()
Rate<- AoE.NRMSD(results$X.Simulated,results$X.Experimental)
GT<- AoE.NRMSD(results$G.T.,52)
GD<- AoE.NRMSD(results$G.T.,43)
criteria<- cbind(Rate,GD,GT)
return(criteria)
}
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, method="simple", my.cost) {
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, method="lhs", my.cost)
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="lhs", my.cost)
f<- AddFactor(name="cyclePoint",min=0,max=90)
f<- AddFactor(factors=f, name="conjugationCost",min=0,max=100)
f<- AddFactor(factors=f, name="pilusExpressionCost",min=0,max=100)
f<- AddFactor(factors=f, name="gamma0",min=1,max=10)
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="lhs", my.cost)
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="lhs", my.cost)
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="lhs", my.cost)
v$object
v$charts
v$charts[1,]
v$charts[1,]$chart
v$charts[1,]$chart$grobs
v$charts[1,]$chart$grobs$
;
v$charts[1,]$chart
plot(v$charts[1,]$chart)
v$charts[1,]$chart$grobs
p<- plot(v$charts[1,]$chart)
ggplot2(v$charts[1,]$chart)
ggplot(v$charts[1,]$chart)
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="lhs", my.cost)
v$object
v$cha
v$cha
v$charts$chart
v$charts[1,"table"]
plot(v$charts[1,"table"])
plot(v$charts[1,"table"]$table)
plot(v$charts[1,"both"]$both)
plot(v$charts[1,]$both)
plot(v$charts[1,]$chart)
v$charts[1,]$chart
v$charts[1,]$both
v$charts[1,]$both$grobs
v$object
v$object["Rate"]
v$object[variable=="Rate"]
v$object[1,]$parameters
v$object[1,]$objective
v$charts
v$charts[1,]$both
ggplot(v$charts[1,]$both)
library(ggplot2)
ggplot(v$charts[1,]$both)
arrangeGrop(v$charts[1,]$both)
arrangeGrob(v$charts[1,]$both)
gridExtra::arrangeGrob(v$charts[1,]$both)
gridExtra::arrangeGrob(v$charts[1,]$both$grobs)
gridExtra::grid.arrange(v$charts[1,]$both)
p<- gridExtra::grid.arrange(v$charts[1,]$both)
v$object
v$object[1,]$parameters
v$object[1,]$parameters
v$object[1,]$parameters
l<- function(o) v$object[1,]$parameters
l
l<- function(o) o$object[1,]$parameters
l(v)
l(v1)
l(v)
v$object[1,]$variable
v$object[,]$variable == "Rate"
v$object[,]$variable
v$object[,]
v$object[,"variable"]
v$object[,"variable"] == "Rate"
l<- function(o,k) o$object[(o$object[,"variable"] == k),]$parameters
l(v,"Rate")
l(v,"Rate")
v$fun<- l
v$fun(v,"total")
v$object
v$object[,"variable"]
c(v$object[,"variable"])
v$object[[,"variable"]]
[v$object[,"variable"]]
v$object[,"variable"][]
v$object[,"variable"][[]]
v$object[,"variable"][][]
v$object[,"variable"]$1
v$object[,"variable"][1]
v$object[,"variable"][,]
v$object[,"variable"][,1]
v$object[,"variable"][1,]
v$object[,"variable"][[1]]
v$object[,"variable"][[]]
v$object[,"variable"][[c(1,2)]]
v$object[,"variable"][[1]]
v$object[,"variable"][[2]]
v$object[,"variable"][c(1,2)]
v$object[,"variable"][c(1,2)][]
v$object[,"variable"][c(1,2)][[]]
v$object[,"variable"][c(1,2)][[1]]
v$object[,"variable"][c(1,2)]
v$object[,"variable"]
as.array(v$object[,"variable"])
as.vector(v$object[,"variable"])
length(v$object[,"variable"])
length(v$object[,"variable"])
length(v$object[,])
v$fun(v,"total")
v$fun(v,)
v$object[,"variable"]
unlist(v$object[,"variable"])
unlist(v$object[,"variable"])
v$object
l<- function(o) v$object[1,]$parameters
l1<- function(o) v$object[1,]
l1(v)
l<- function(o,k) o$object[(o$object[,"variable"] == k),]
l(v,"Rate")
l(v,"Rate")[1]
l(v,"Rate")[2]
l(v,"Rate")[1]
l(v,"Rate")["variable"]
l(v,"Rate")["parameters"]
l(v,"Rate")["parameters"]
l(v,"Rate")
l(v,"Rate")$objective
l(v,"Rate")[objective]
l(v,"Rate")["objective"]
unlist(l(v,"Rate")["objective"])
l(v,"Rate")["objective"]
l<- function(o,k) o$object[(o$object[,"variable"] == k),"parameters"]
l(v,"Rate")
l<- function(o,k) o$object[(o$object[,"variable"] == k),"parameters"]$
;
l<- function(o,k) o$object[(o$object[,"variable"] == k),"parameters"][]
l(v,"Rate")
l<- function(o,k) o$object[(o$object[,"variable"] == k),"parameters"][1]
l(v,"Rate")
l<- function(o,k) o$object[(o$object[,"variable"] == k),"parameters"][[1]
]
l(v,"Rate")
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object$variables
v$object$``
v$object
v$object
v$object$values(v$object,"parameters")
v$object$values(v$object$,"parameters")
v$object$values(v,"parameters")
v$object$values(v,"objective")
v$object[1,]
v$object[,1]
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object$data
v$object$values(v,"Rate","parameters")
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object$test()
v$object$keys
v$object$data
..getNamespace()
..
.
$
$$
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object$test()
library(rrepast)
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object$values(k = "Rate")
v$charts
v$charts[1,"chart"]
ggplotGrob(v$charts[1,"both"])
ggplotGrob(v$charts[1,"both"]$both)
v$charts[1,"both"]$both
ggplot_build($charts[1,"both"]$both)
ggplot_build($charts[1,"both"])
ggplot_build(v$charts[1,"both"])
plot(v$charts[1,"both"])
plot(v$charts[1,"both"]$both)
p<- ggplot()
p<- p + annotation_custom(grob= v$charts[1,"both"])
p
p<- p + annotation_custom(grob= v$charts[1,"both"]$both)
p
v$charts
v$charts[1,"both"]
print(v$charts[1,"both"])
grid.arrange(v$charts[1,"both"])
library(gridExtra)
grid.arrange(v$charts[1,"both"])
grid.arrange(v$charts[1,"both"]$both)
grid.arrange(v$charts[1,]$both)
grid.arrange(v$charts[1,]$table)
p<- grid.arrange(v$charts[1,]$table)
p
plot(v$charts[1,]$table)
plot(v$charts[1,]$chart)
plot(v$charts[1,]$chart)
cchart<- function(d,k,n) {d$charts[(d$charts[,"variable"] == k),n][[1]]}
cchart(v,"Rate","both")
v$object
v$charts
v
v$object
v$charts
colnames(v$charts)
"both" %in% colnames(v$charts)
"both1" %in% colnames(v$charts)
devtools::document()
devtools::document()
devtools::document()
library(rrepast)
rm(list=ls())
my.cost<- function(params, results) {
criteria<- c()
Rate<- AoE.NRMSD(results$X.Simulated,results$X.Experimental)
GT<- AoE.NRMSD(results$G.T.,52)
GD<- AoE.NRMSD(results$G.T.,43)
criteria<- cbind(Rate,GD,GT)
return(criteria)
}
Easy.Setup("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
f<- AddFactor(name="cyclePoint",min=0,max=90)
f<- AddFactor(factors=f, name="conjugationCost",min=0,max=100)
f<- AddFactor(factors=f, name="pilusExpressionCost",min=0,max=100)
f<- AddFactor(factors=f, name="gamma0",min=1,max=10)
v<- Easy.Calibration("c:/usr/models/BactoSim(HaldaneEngine-1.0)","ds::Output",300,f,exp.n = 10, exp.r=1, smax=5, design="mcs", my.cost)
v$object
v$charts
Results.GetCharts(v)
c<- Results.GetCharts(v)
Calibration.GetMemberKeys(c)
Calibration.GetMemberList(c,"Rate","both")
plot(Calibration.GetMemberList(c,"Rate","both"))
library(rrepast)
devtools::document()
library(rrepast)
devtools::document()
devtools::document()
library(rrepast)
devtools::document()
devtools::document()
devtools::document()
library(rrepast)
ls()
v$experiment$output
col.sum(exp$output)
library(rrepast)
col.sum(exp$output)
col.sum(v$experiment$output)
col.sum(v$experiment$output)$total
devtools::document()
devtools::build()
library(rrepast)
jarfile("rrepast-integration.jar")
basename("C:/Program Files/R/R-3.3.1/library/rrepast/java/")
12*9
12*8
8*3
8*3*30
configModelDirs("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
library(rrepast)
devtools::document()
library(rrepast)
integrationjar.installer("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
library(rrepast)
integrationjar.installer("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
devtools::document()
devtools::document()
devtools::document()
config.copylib("c:/usr/models/PredatorPrey")
config.copylib("c:/usr/models/PredatorPrey",uninstall=TRUE)
devtools::document()
library(rrepast)
check.scenario("c:/usr/models/PredatorPrey")
grep("a","antonio prestes garcia")
grep("x","antonio prestes garcia")
grep("x","antonio prestes garcia",perl=TRUE)
grep("a","antonio prestes garcia",perl=TRUE)
grep("a*","antonio prestes garcia",perl=TRUE)
grep("a*","antonio prestes garcia")
grep("a{2}","antonio prestes garcia")
grep("a{2}","antonio prestes garciaa")
library(rrepast)
check.scenario("c:/usr/models/PredatorPrey")
check.scenario("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
library(rrepast)
check.scenario("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
library(rrepast)
check.scenario("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
readLines("c:/usr/models/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0).rs/scenario.xml")
readLines("c:/usr/models/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0).rs/scenario.xml",warn = FALSE)
library(rrepast)
readLines("c:/usr/models/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0)/BactoSim(HaldaneEngine-1.0).rs/scenario.xml",warn = FALSE)
check.scenario("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
check.scenario("c:/usr/models/PredatorPrey")
1 && 1
1 && 2
1 && 0
devtools::document()
library(rrepast)
config.check("c:/usr/models/PredatorPrey")
config.check("c:/usr/models/BactoSim(HaldaneEngine-1.0)")
txt<- readLines("c:/usr/models/PredatorPrey/PredatorPrey/PredatorPrey.rs/scenario.xml")
txt<- readLines("c:/usr/models/PredatorPrey/PredatorPrey/PredatorPrey.rs/scenario.xml",warn=false)
txt<- readLines("c:/usr/models/PredatorPrey/PredatorPrey/PredatorPrey.rs/scenario.xml",warn=FALSE)
txt
txt[1:2]
txt
txt[1]
txt[2]
rbind(x,txt[1])
x<- c()
rbind(x,txt[1])
x<- c()
x[1]<- txt[1]
x
x[2]<- txt[2]
x
txt
x
x[2,1]<- txt[2]
typeof(txt)
typeof(txt[])
txt[c(1,2)]
txt[c(1,2,3)]
txt[c(1,2)]
txt[c(1,3)]
txt[c(1)]
txt[c(1,2,3)]
x[2]<- txt[2]
x[3]<- txt[3]
x
length(x)
length(txt)
grep("TES","TATA TEST")
grep("TES","TATA TEXT")
devtools::document()
library(rrepast)
config.scenario("c:/usr/models/PredatorPrey")
library(rrepast)
config.scenario("c:/usr/models/PredatorPrey")
library(rrepast)
config.scenario("c:/usr/models/PredatorPrey")
help(writeLines)
devtools::document()
library(rrepast)
config.scenario("c:/usr/models/PredatorPrey")
e<- Model("c:/usr/models/PredatorPrey",600,dataset="Agent Counts", TRUE)
GetSimulationParameters(e)
r<- Run(e)
config.copylib("c:/usr/models/PredatorPrey")
e<- Model("c:/usr/models/PredatorPrey",600,dataset="Agent Counts", TRUE)
r<- Run(e)
r
